<project name="Warehouse Common Java" default="build">

    <!-- Determine version number -->
    <property file="src/version.prop"/>

    <!-- Program meta data -->
    <property name="module.name" value="biowarehouse"/>
    <property name="module.jar" value="${module.name}.jar"/>
    <property name="unit.test.suffix" value="_Test"/>
    <property name="test.prefix" value=""/>

    <!-- Build properties -->
    <property name="bw.root" location="../../.."/>
    <property name="src.dir" location="${basedir}/src"/>
    <property name="build.dir" location="${basedir}/build"/>
    <property name="build.src.dir" location="${build.dir}/src"/>
    <property name="build.classes.dir" location="${build.dir}/classes"/>
    <property name="lib.dir" location="${basedir}/lib"/>
    <property name="bin.dir" location="${basedir}/bin"/>
    <property name="dist.dir" location="${basedir}/dist"/>
    <property name="module.jar.path" location="${dist.dir}/${module.jar}"/>
    <property name="doc.dir" location="${basedir}/docs"/>
    <property name="api.dir" location="${doc.dir}/api"/>

    <property name="etc.dir" location="${basedir}/etc"/>
    <property name="run.script" value="runDeleteDataSet.sh"/>
    <property name="run.script.location" location="${etc.dir}/${run.script}"/>

    <!-- Testing properties -->
    <property name="test.dir" location="${basedir}/test"/>
    <property name="test.properties.file" location="${test.dir}/unittest.properties"/>
    <property name="test.src.dir" location="${test.dir}/src"/>
    <property name="test.build.dir" location="${test.dir}/build"/>
    <property name="test.results.dir" location="${test.dir}/results"/>
    <property name="test.xmlResults.dir" location="${test.results.dir}/xmlResults"/>
    <property name="test.reports.dir" location="${test.results.dir}/htmlReports"/>

    <!-- Other properties -->
    <property name="mysql.driver.jar" location="${lib.dir}/mysql-connector-java-3.0.9-stable-bin.jar"/>
    <property name="oracle.driver.jar" location="${lib.dir}/ojdbc14.jar"/>
    <property name="log4j.jar" location="${lib.dir}/log4j-1.2.8.jar"/>
    <property name="dbschema.jar" location="${lib.dir}/db-schema.jar"/>
    <property name="cli.jar" location="${lib.dir}/commons-cli-1.0.jar"/>
    <property name="xmlbeans.jar" location="${lib.dir}/xbean.jar"/>
    <property name="warehouse.schema.definition.file" location="${bw.root}/schema/all-schema.xml"/>
    <property name="xsd.dir" location="${bw.root}/utils/xsd"/>
    <property name="db-schema.jar" location="${lib.dir}/db-schema.jar"/>
    <property name="element-map-beans.jar" location="${lib.dir}/element-map-beans.jar"/>
    <property name="jaxb20-classpath"
              value="{lib.dir}/jaxb-api.jar;${lib.dir}/jaxb-impl.jar;${lib.dir}/jsr173_api.jar"/>
    <property file="build.properties"/>

    <!-- CLASSPATHS -->
    <path id="classpath.compile" description="The classpath used for compiling the program">
        <pathelement path="${mysql.driver.jar}"/>
        <pathelement path="${oracle.driver.jar}"/>
        <pathelement path="${log4j.jar}"/>
        <pathelement path="${cli.jar}"/>
        <pathelement path="${dbschema.jar}"/>
        <pathelement path="${xmlbeans.jar}"/>
        <pathelement path="${element-map-beans.jar}"/>
        <pathelement path="${db-schema.jar}"/>
        <pathelement path="${jaxb20-classpath}"/>
    </path>

    <path id="classpath.run" description="The classpath used for running the program">
        <path refid="classpath.compile"/>
        <pathelement path="${module.jar.path}"/>
    </path>

    <path id="classpath.test" description="The classpath used for compiling and running unit tests">
        <path refid="classpath.compile"/>
        <pathelement path="${module.jar.path}"/>
        <pathelement path="${test.build.dir}"/>
        <pathelement path="${lib.dir}/junt-3.8.1.jar"/>
    </path>

    <!-- =========================================================== -->
    <!--  CLEAN                                                      -->
    <!-- =========================================================== -->
    <target name="clean" description="deletes files/dirs made by this build">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${test.build.dir}"/>
        <delete dir="${test.results.dir}"/>
        <delete dir="${src.dir}/${dbschema.dir}"/>
    </target>

    <!-- =========================================================== -->
    <!--  INIT                                                       -->
    <!--  Create a unique build number for each build.               -->
    <!-- =========================================================== -->
    <target name="init">
        <tstamp>
            <format pattern="yyyyMMdd-HHmm-z" property="build.number"/>
        </tstamp>
        <!-- Touch this file to force the overwrite of the version numbers -->
        <!--        <touch file="${src.dir}/com/sri/biospice/warehouse/database/DatabaseProxy.java"/>-->

<!-- Unfortunately, the below doesn't work for correctly detecting Java 1.6. This is a problem with Ant. Please leave commented out until this problem has been fixed. taltman:Jan-22-2009 -->
	 <!-- Check imperfectly for Java 1.5+. -->
<!--         <condition property="java.version.okay"> /-->
<!--                 <contains string="${java.version}" substring="1.6"/> /-->
<!--         </condition> -->
        
<!--         <fail unless="java.version.okay" /-->
<!--               message="Java SDK 1.6 is required to build the BioWarehouse.  We detected version ${ant.java.version}."/> /-->

        <!-- Changes to Support Schema diff tool/-->
        <path id="dbschema.classpath">
            <fileset dir="${lib.dir}">
                <include name="jaxb-api.jar"/>
                <include name="jaxb-xjc.jar"/>
            </fileset>
        </path>
    </target>

    <!-- =========================================================== -->
    <!--  COMPILE                                                    -->
    <!-- =========================================================== -->
    <target name="dbSchema-check" depends="init">
        <condition property="dbSchema.available">
            <available file="${src.dir}/${dbschema.dir}"/>
        </condition>
    </target>

    <target name="dbSchema-generate" unless="dbSchema.available">
        <echo message="GENERATING JAXB 2.0 Classes"/>
        <!-- Generate the Concept map classes form the schema using JAXB /-->
        <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
            <classpath refid="dbschema.classpath"/>
        </taskdef>

        <mkdir dir="${src.dir}/${dbschema.dir}"/>
        <xjc schema="${dbschema.file}" target="${src.dir}" package="${dbschema.package}"/>
    </target>

    <target name="compile" depends="init, dbSchema-check, dbSchema-generate" description="Compile source code">
        <echo level="info" message="## ${ant.project.name}: Compiling source code..."/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.src.dir}"/>
        <mkdir dir="${build.classes.dir}"/>

        <!-- Filter source code -->
        <!--        <filter token="BUILD_NUMBER" value="${build.number}"/>-->
        <!--        <filter token="VERSION_NUMBER" value="${version.number}"/>-->
        <!--        <copy todir="${build.src.dir}" filtering="true">-->
        <!--            <fileset dir="${src.dir}">-->
        <!--                <include name="**/*.java"/>-->
        <!--            </fileset>-->
        <!--        </copy>-->

        <!-- Compile -->
        <javac srcdir="${src.dir}" destdir="${build.classes.dir}" debug="true">
            <classpath refid="classpath.compile"/>
            <!--            <compilerarg line="-Xlint:unchecked"/> -->
        </javac>
    </target>

    <!-- =========================================================== -->
    <!--  BUILD                                                      -->
    <!-- =========================================================== -->
    <target name="build" depends="compile" description="Build the project">
        <echo level="info" message="## ${ant.project.name}: Creating jar file..."/>
        <mkdir dir="${dist.dir}"/>
        <jar jarfile="${module.jar.path}">
            <fileset dir="${build.classes.dir}">
                <include name="**/*.class"/>
            </fileset>
            <fileset dir="${src.dir}">
                <include name="**/*.xml"/>
            </fileset>
        </jar>
    </target>

    <!-- =========================================================== -->
    <!--  COMPILE-TEST                                               -->
    <!-- =========================================================== -->
    <target name="compile-test" depends="build" description="Compile test source code">
        <echo level="info" message="## ${ant.project.name}: Compiling test source code..."/>
        <mkdir dir="${test.dir}"/>
        <mkdir dir="${test.build.dir}"/>
        <javac srcdir="${test.src.dir}" destdir="${test.build.dir}" failonerror="true">
            <classpath refid="classpath.test"/>
            <include name="**/*${unit.test.suffix}.java"/>
        </javac>
    </target>

    <!-- =========================================================== -->
    <!--  TEST                                                       -->
    <!--  To be able to compile/run the unit tests, you need to have -->
    <!--  common/lib/junit-3.8.1.jar file on the classpath or else   -->
    <!--  place it in ANT_HOME/lib.                                  -->
    <!-- =========================================================== -->
    <target name="test" depends="compile, compile-test" description="Run unit tests">

        <echo level="info" message="## ${ant.project.name}: Running the unit tests..."/>

        <!-- Set the properties needed to connect to the warehouse -->
        <property file="${test.properties.file}"/>

        <!-- Make dirs to receive reports -->
        <mkdir dir="${test.reports.dir}"/>
        <mkdir dir="${test.xmlResults.dir}"/>

        <!-- Run unit tests -->
        <junit fork="yes" showoutput="yes" printsummary="on" dir="${test.dir}" failureproperty="tests.failed">
            <classpath refid="classpath.test"/>
            <formatter type="xml"/>
            <batchtest todir="${test.xmlResults.dir}">
                <fileset dir="${test.build.dir}">
                    <include name="**/${test.prefix}*${unit.test.suffix}*"/>
                </fileset>
            </batchtest>
            <sysproperty key="warehouse.test.database.host" value="${warehouse.test.database.host}"/>
            <sysproperty key="warehouse.test.database.port" value="${warehouse.test.database.port}"/>
            <sysproperty key="warehouse.test.database.name" value="${warehouse.test.database.name}"/>
            <sysproperty key="warehouse.test.database.username" value="${warehouse.test.database.username}"/>
            <sysproperty key="warehouse.test.database.password" value="${warehouse.test.database.password}"/>
            <sysproperty key="warehouse.test.database.dbms.type" value="${warehouse.test.database.dbms.type}"/>
        </junit>

        <!-- Transform xml results into human-readable html results -->
        <junitreport todir="${test.reports.dir}">
            <fileset dir="${test.xmlResults.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.reports.dir}"/>
        </junitreport>

        <echo level="info"
              message="## ${ant.project.name}: Unit tests are completed.  See the results at ${test.reports.dir}/index.html..."/>

        <fail if="tests.failed" message="One or more tests failed"/>

    </target>

    <!-- =========================================================== -->
    <!--  RUN                                                        -->
    <!-- =========================================================== -->
    <target name="run-example" depends="build" description="Run the Warehouse example program">
        <echo level="info" message="## ${ant.project.name}: Running the Warehouse example program..."/>
        <java fork="true" classname="com.sri.biospice.warehouse.database.WarehouseExample">
            <classpath refid="classpath.run"/>
        </java>
    </target>

    <target name="run-force-drop-tables" depends="build"
            description="Uses brute-force method to drop all tables and Oracle sequences">
        <echo level="info" message="## ${ant.project.name}: Running the Force Drop Tables program..."/>
        <property name="developer.properties" location="developer.properties"/>
        <java fork="true" classname="com.sri.biospice.warehouse.util.ForceDropTables" failonerror="true">
            <classpath refid="classpath.run"/>
            <arg line="-p ${developer.properties}"/>
        </java>
    </target>

    <target name="run-find-object" depends="build" description="Find an object based on its WID">
        <echo level="info" message="## ${ant.project.name}: Running the Find the Object program..."/>
        <property name="developer.properties" location="developer.properties"/>
        <java fork="true" classname="com.sri.biospice.warehouse.util.FindTheObject">
            <classpath refid="classpath.run"/>
            <arg line="-p ${developer.properties} -f ${warehouse.schema.definition.file}"/>
        </java>
    </target>

    <target name="run-delete-dataset" depends="build">
        <echo level="info" message="## ${ant.project.name}: Running the Delete DataSet program..."/>
        <property name="developer.properties" location="developer.properties"/>
        <java fork="true" classname="com.sri.biospice.warehouse.util.DeleteDataSet">
            <classpath refid="classpath.run"/>
            <arg line="-p ${developer.properties}"/>
        </java>
    </target>

    <target name="run-html-dump" depends="build"
            description="Run the summary that dumps the database into an HTML file">
        <echo level="info" message="## ${ant.project.name}: Running summary program..."/>
        <java fork="true" classname="com.sri.biospice.warehouse.util.Summary" maxmemory="512M" failonerror="true">
            <classpath refid="classpath.run"/>
            <arg line="-p developer.properties -f ${warehouse.schema.definition.file}"/>
        </java>
    </target>

    <target name="run-summarize-datasets" depends="build" description="Run the summarize-datasets program">
        <echo level="info" message="## ${ant.project.name}: Running summarize datasets program..."/>
        <java fork="true" classname="com.sri.biospice.warehouse.util.SummarizeDataSets" maxmemory="512M"
              failonerror="true">
            <classpath refid="classpath.run"/>
            <arg line="-p developer.properties -f ${warehouse.schema.definition.file}"/>
        </java>
    </target>

    <!-- called from build.xml in schema dir -->
    <target name="create-ddl-scripts" depends="build"
            description="Create the database DDL schema creation script">
        <echo level="info" message="## ${ant.project.name}: Creating Database DDL scripts..."/>
        <java fork="true" classname="com.sri.bw.database.ddl.DDLCreation" maxmemory="512M" failonerror="true">
            <classpath refid="classpath.run"/>
            <arg line="${arg.line}"/>
        </java>
    </target>

    <!--<target name="init-prep">-->

    <!--<echo>${developer.properties}</echo>-->
    <!--<property file="developer.properties"/>-->

    <!-- Determine DBMS type -->
    <!--<condition property="is.oracle.dbms" value="true">-->
    <!--<contains string="${dbms}" substring="oracle"/>-->
    <!--</condition>-->

    <!--<condition property="is.mysql.dbms" value="true">-->
    <!--<contains string="${dbms}" substring="mysql"/>-->
    <!--</condition>-->

    <!--<fail unless="dbms" message="developer.properties are not defined"/>-->

    <!--<property name="schema.file" location="warehouse-${dbms}.sql"/>-->
    <!--<property name="index.file" location="warehouse-${dbms}-index.sql"/>-->
    <!--<property name="destroy.file" location="warehouse-${dbms}-destroy.sql"/>-->

    <!--<tstamp>-->
    <!--<format pattern="yyyyMMdd-HHmm-z" property="build.number"/>-->
    <!--</tstamp>-->
    <!--<echo level="info" message="## ${ant.project.name}: Build number = ${build.number}"/>-->
    <!--<echo level="info" message="DBMS type is: ${dbms}"/>-->
    <!--<echo level="info" message="schema file: ${schema.file}"/>-->

    <!--</target>-->

    <!--<target name="init-db" depends="init-prep, init-oracle, init-mysql"/>-->

    <!-- Initialize properties for Oracle -->
    <!--<target name="init-oracle" if="is.oracle.dbms">-->
    <!--<property name="jdbc.driver.name" value="oracle.jdbc.driver.OracleDriver"/>-->
    <!--<property name="jdbc.driver.jar" location="${lib.dir}/ojdbc14.jar"/>-->
    <!--<property name="jdbc.url"-->
    <!--value="jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS=(HOST=${host})(PROTOCOL=tcp)(PORT=${port}))(CONNECT_DATA=(SID=${name})))"/>-->
    <!--<property name="load.schema.file" location="mage-oracle.sql"/>-->
    <!--</target>-->

    <!-- Initialize properties for MySQL -->
    <!--<target name="init-mysql" if="is.mysql.dbms">-->
    <!--<property name="jdbc.driver.name" value="com.mysql.jdbc.Driver"/>-->
    <!--<property name="jdbc.driver.jar" location="${lib.dir}/mysql-connector-java-3.0.9-stable-bin.jar"/>-->
    <!--<property name="jdbc.url" value="jdbc:mysql://${host}:${port}/${name}"/>-->
    <!--<property name="load.schema.file" location="mage-mysql.sql"/>-->
    <!--</target>-->

    <!--<target name="reload-schema" depends="init-db"-->
    <!--description="Drop whatever is in the DB and load a fresh copy of the schema">-->

    <!--<echo level="info" message="## ${ant.project.name}: Re-loading database schema"/>-->

    <!-- Drop existing database tables -->
    <!--<ant dir="${common.dir}" target="run-force-drop-tables" inheritall="false">-->
    <!--<property name="developer.properties" location="${input.properties}"/>-->
    <!--</ant>-->

    <!-- Drop schema -->
    <!--<echo level="info" message="## ${ant.project.name}: Loading MAGE schema..."/>-->
    <!--<sql driver="${jdbc.driver.name}"-->
    <!--url="${jdbc.url}"-->
    <!--userid="${username}" password="${password}"-->
    <!--onerror="abort"-->
    <!--src="${destroy.file}">-->
    <!--<classpath location="${jdbc.driver.jar}"/>-->
    <!--</sql>-->
    <!--<antcall target="load-schema"/>-->
    <!--</target>-->

    <!--<target name="load-schema" depends="init-db">-->

    <!-- Load schema -->
    <!--<echo level="info" message="## ${ant.project.name}: Loading MAGE schema..."/>-->
    <!--<sql driver="${jdbc.driver.name}"-->
    <!--url="${jdbc.url}"-->
    <!--userid="${username}" password="${password}"-->
    <!--onerror="abort"-->
    <!--src="${schema.file}">-->
    <!--<classpath location="${jdbc.driver.jar}"/>-->
    <!--</sql>-->

    <!-- Load indexes -->
    <!--<echo level="info" message="## ${ant.project.name}: Loading MAGE indexes..."/>-->
    <!--<sql driver="${jdbc.driver.name}"-->
    <!--url="${jdbc.url}"-->
    <!--userid="${username}" password="${password}"-->
    <!--onerror="abort"-->
    <!--src="${index.file}">-->
    <!--<classpath location="${jdbc.driver.jar}"/>-->
    <!--</sql>-->
    <!--</target>-->

    <!-- =========================================================== -->
    <!--  JAVADOC                                                    -->
    <!-- =========================================================== -->
    <target name="javadoc" depends="build" description="Generate Javadoc for the source code">
        <echo level="info" message="## ${ant.project.name}: Building the source code documentation..."/>

        <property name="ps" value="${path.separator}"/>
        <property name="yDocHome" value="C:\Tools\java\ydoc\ydoc-2.2_01\ydoc-2.2_01"/>

        <javadoc classpathref="classpath.run"
                 additionalparam="-breakiterator">
            <!--<packageset dir="C:\Teton\Projects\Warehouse\miame-loader\mage\java-api-src\src"/>-->
            <packageset dir="${src.dir}"/>
            <doclet name="com.sri.bw.doc.UMLDoclet" path="${module.jar.path}">
            </doclet>
        </javadoc>

        <!--<javadoc destdir="${api.dir}" classpathref="classpath.run"-->
        <!--additionalparam="-breakiterator" sourcepath="${src.dir}">-->
        <!--<packageset dir="${src.dir}"/>-->

        <!--</javadoc>-->

        <echo level="info" message="## ${ant.project.name}: Javadoc documentation can be found at ${api.dir}"/>
    </target>

    <taskdef name="xmlbean" classname="org.apache.xmlbeans.impl.tool.XMLBean" classpath="${xmlbeans.jar}"/>

    <target name="xmlbeans-db-schema" description="Transforms db-schema.xsd into XMLBeans classes">
        <xmlbean verbose="true" destfile="${db-schema.jar}"
                 classpathref="classpath.compile" includes="xmlbeans.xsdconfig">
            <fileset dir="${xsd.dir}">
                <include name="db-schema.xsd"/>
                <include name="db-schema.xsdconfig"/>
            </fileset>
        </xmlbean>
    </target>

    <target name="xmlbeans-element-map" description="Transforms element-map.xsd into XMLBeans classes">
        <xmlbean verbose="true" destfile="${element-map-beans.jar}"
                 classpathref="classpath.compile">
            <fileset dir="${xsd.dir}">
                <include name="element-map.xsd"/>
                <include name="element-map.xsdconfig"/>
            </fileset>
        </xmlbean>
    </target>

    <target name="run-validation" depends="build">
        <echo level="info" message="## ${ant.project.name}: Validating XML schema file..."/>
        <java fork="true" classname="com.sri.biospice.warehouse.util.Validation" maxmemory="512M" failonerror="true">
            <classpath refid="classpath.run"/>
            <arg line="${arg.line}"/>
        </java>
    </target>

</project>
